/*
To brighten up the gala dinner of the IOI'98 we have a set of N (10 <= N <= 100) colored lamps numbered from 1 to N.

The lamps are connected to four buttons:

Button 1: When this button is pressed, all the lamps change their state: those that are ON are turned OFF and those that are OFF are turned ON.
Button 2: Changes the state of all the odd numbered lamps.
Button 3: Changes the state of all the even numbered lamps.
Button 4: Changes the state of the lamps whose number is of the form 3xK+1 (with K>=0), i.e., 1,4,7,...
A counter C records the total number of button presses.

When the party starts, all the lamps are ON and the counter C is set to zero.

You are given the value of counter C (0 <= C <= 10000) and the final state of some of the lamps after some operations have been executed. Write a program to determine all the possible final configurations of the N lamps that are consistent with the given information, without repetitions.

PROGRAM NAME: lamps
INPUT FORMAT
No lamp will be listed twice in the input.

Line 1:	N
Line 2:	Final value of C
Line 3:	Some lamp numbers ON in the final configuration, separated by one space and terminated by the integer -1.
Line 4:	Some lamp numbers OFF in the final configuration, separated by one space and terminated by the integer -1.
SAMPLE INPUT (file lamps.in)
10
1
-1
7 -1
In this case, there are 10 lamps and only one button has been pressed. Lamp 7 is OFF in the final configuration.

OUTPUT FORMAT
Lines with all the possible final configurations (without repetitions) of all the lamps. Each line has N characters, where the first character represents the state of lamp 1 and the last character represents the state of lamp N. A 0 (zero) stands for a lamp that is OFF, and a 1 (one) stands for a lamp that is ON. The lines must be ordered from least to largest (as binary numbers).

If there are no possible configurations, output a single line with the single word `IMPOSSIBLE'

SAMPLE OUTPUT (file lamps.out)
0000000000
0101010101
0110110110
In this case, there are three possible final configurations:
All lamps are OFF
Lamps 1, 3, 5, 7, 9 are OFF and lamps 2, 4, 6, 8, 10 are ON.
Lamps 1, 4, 7, 10 are OFF and lamps 2, 3, 5, 6, 8, 9 are ON.
*/

/*
ID: jasonxi1
TASK: lamps
LANG: C++
*/
#include <fstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string.h>
#include <string>

#define MAX_N 101

using namespace std;

vector<string> solutions;
int num_correct = 0;

void buttons(int but_num, bool lamps[], int size)
{
	if (but_num == 1)
	{
		for (int i = 1; i <= size; i++)
		{
			lamps[i] = !lamps[i];
		}
	}
	if (but_num == 2)
	{
		for (int i = 1; i <= size; i += 2)
		{
			lamps[i] = !lamps[i];
		}
	}
	if (but_num == 3)
	{
		for (int i = 2; i <= size; i += 2)
		{
			lamps[i] = !lamps[i];
		}
	}
	if (but_num == 4)
	{
		for (int i = 1; i <= size; i += 3)
		{
			lamps[i] = !lamps[i];
		}
	}
}

void find_config(bool lamps[], int size, int reqs[], int off_size, int on_size, int C, int counter)
{
	if (counter == C)
	{
		for (int i = 0; i < on_size; i++)
		{
			if (!lamps[reqs[i]])
			{
				return;
			}
		}
		for (int i = on_size; i < on_size+off_size; i++)
		{
			if (lamps[reqs[i]])
			{
				return;
			}
		}
		string poss_ans;
		for (int i = 1; i <= size; i++)
		{
			poss_ans+=to_string(lamps[i]);
		}
		if (find(solutions.begin(), solutions.end(), poss_ans) == solutions.end())
		{
			solutions.push_back(poss_ans);
			num_correct += 1;
		}
	}
	else
	{
		for (int i = 1; i <= 4; i++)
		{
			buttons(i, lamps, size);
			find_config(lamps, size, reqs, off_size, on_size, C, counter+1);
			buttons(i, lamps, size);
		}
	}
}

int main()
{
	ifstream fin("lamps.in");
	ofstream fout("lamps.out");
	int N, C, nron = 0, nroff = 0;
	bool lamps[MAX_N];
	int reqs[MAX_N - 1];
	fin >> N >> C;
	int i = 0;
	while (true)
	{
		int num;
		fin >> num;
		if (num != -1)
		{
			reqs[i] = num;
			i++;
			nron++;
		}
		else
		{
			break;
		}
	}
	while (true)
	{
		int num;
		fin >> num;
		if (num != -1)
		{
			reqs[i] = num;
			i++;
			nroff++;
		}
		else
		{
			break;
		}
	}
	for (int i = 1; i <= N;i++)
	{
		lamps[i] = true;
	}
	if (C % 2 == 0 && C > 4)
	{
		C = 4;
	}
	else if(C > 3 && C % 2 == 1)
	{
		C == 3;
	}
	find_config(lamps, N, reqs, nroff, nron, C, 0);
	if (num_correct == 0)
	{
		fout << "IMPOSSIBLE" << endl;
	}
	else
	{
		sort(solutions.begin(), solutions.end());
		for (int i = 0; i < solutions.size(); i++)
		{
			fout << solutions[i] << endl;
		}
	}
	return 0;
}