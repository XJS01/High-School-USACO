/*
ID: jxiong78
TASK: Icy Perimeter (2019 Jan Silver 2)
LANG: C++
*/

#include <iostream>
#include <fstream>
#include <queue>

#define MAX_N 1000

using namespace std;

bool visited[MAX_N][MAX_N] = { false };
char graph[MAX_N][MAX_N];
int N, max_area = 0, min_perimeter = 0;
int r[4] = { 0, 0, 1,-1 };
int c[4] = { 1, -1, 0, 0 };

pair <int, int> bfs(int row, int col)
{
	queue <pair<int, int>> q;
	int perimeter = 0;
	int area = 0;
	q.push(make_pair(row, col));
	visited[row][col] = true;
	while (q.size() != 0)
	{
		pair<int, int> rc = q.front();
		q.pop();
		area += 1;
		perimeter += 4;
		for (int i = 0; i < 4; i++)
		{
			int next_row = rc.first + r[i];
			int next_col = rc.second + c[i];
			if (next_row < N && next_row >= 0 && next_col < N && next_col >= 0 && graph[next_row][next_col] == '#')
			{
				perimeter -= 1;
				if (!visited[next_row][next_col])
				{
					q.push(make_pair(next_row, next_col));
					visited[next_row][next_col] = true;
				}
			}
		}
	}

	return make_pair(area, perimeter);
}

int main()
{
	ifstream fin("perimeter.in");
	ofstream fout("perimeter.out");
	fin >> N;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (fin.peek() == '\n')
			{
				fin.get();
			}
			graph[i][j] = fin.get();
		}
	}

	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (!visited[i][j] && graph[i][j]=='#')
			{
				pair<int, int> ap = bfs(i, j);
				if (ap.first > max_area)
				{
					max_area = ap.first;
					min_perimeter = ap.second;
				}
				else if (ap.first == max_area && ap.second < min_perimeter)
				{
					min_perimeter = ap.second;
				}
			}
		}
	}
	fout << max_area << " " << min_perimeter << endl;
	return 0;
}