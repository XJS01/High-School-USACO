/*
Farmer John has three milking buckets of capacity A, B, and C liters. Each of the numbers A, B, and C is an integer from 1 through 20, inclusive. Initially, buckets A and B are empty while bucket C is full of milk. Sometimes, FJ pours milk from one bucket to another until the second bucket is filled or the first bucket is empty. Once begun, a pour must be completed, of course. Being thrifty, no milk may be tossed out.

Write a program to help FJ determine what amounts of milk he can leave in bucket C when he begins with three buckets as above, pours milk among the buckets for a while, and then notes that bucket A is empty.

PROGRAM NAME: milk3
INPUT FORMAT
A single line with the three integers A, B, and C.

SAMPLE INPUT (file milk3.in)
8 9 10
OUTPUT FORMAT
A single line with a sorted list of all the possible amounts of milk that can be in bucket C when bucket A is empty.

SAMPLE OUTPUT (file milk3.out)
1 2 8 9 10
SAMPLE INPUT (file milk3.in)
2 5 10
SAMPLE OUTPUT (file milk3.out)
5 6 7 8 9 10
*/

/*
ID: jasonxi1
TASK: milk3
LANG: C++
*/


#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int capacities[3];
int in_buckets[3];
bool visited[21][21][21] = { false };
bool c_amounts[21] = { false };


void pour(int first, int second)
{
	if (in_buckets[first] + in_buckets[second] > capacities[second])
	{
		in_buckets[first] -= capacities[second] - in_buckets[second];
		in_buckets[second] = capacities[second];

	}
	else
	{
		in_buckets[second] += in_buckets[first];
		in_buckets[first] = 0;
	}
}

void dfs()
{
	if (!visited[in_buckets[0]][in_buckets[1]][in_buckets[2]])
	{
		cout << in_buckets[0] << " " << in_buckets[1] << " " << in_buckets[2] << endl;
		visited[in_buckets[0]][in_buckets[1]][in_buckets[2]] = true;
		if (in_buckets[0] == 0)
		{
			c_amounts[in_buckets[2]] = true;
		}
		int init_state[3];
		for (int i = 0; i < 3; i++)
		{
			init_state[i] = in_buckets[i];
		}
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (i != j)
				{
					pour(i, j);
					dfs();
					for (int k = 0; k < 3; k++)
					{
						in_buckets[k] = init_state[k];
					}
				}
			}
		}
	}
}

int main()
{
	ifstream fin("milk3.in");
	ofstream fout("milk3.out");
	for (int i = 0; i < 3; i++)
	{
		fin >> capacities[i];
	}
	in_buckets[2] = capacities[2];
	dfs();
	for (int i = 0; i < 21; i++)
	{
		if (c_amounts[i] && i != capacities[2])
		{
			fout << i << " ";
		}
		if (i == capacities[2])
		{
			fout << i << endl;
		}
	}

	return 0;
}
