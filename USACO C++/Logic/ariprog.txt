/*
An arithmetic progression is a sequence of the form a, a+b, a+2b, ..., a+nb where n=0, 1, 2, 3, ... . For this problem, a is a non-negative integer and b is a positive integer.

Write a program that finds all arithmetic progressions of length n in the set S of bisquares. The set of bisquares is defined as the set of all integers of the form p2 + q2 (where p and q are non-negative integers).

TIME LIMIT: 5 secs
PROGRAM NAME: ariprog
INPUT FORMAT
Line 1:	N (3 <= N <= 25), the length of progressions for which to search
Line 2:	M (1 <= M <= 250), an upper bound to limit the search to the bisquares with 0 <= p,q <= M.
SAMPLE INPUT (file ariprog.in)
5
7
OUTPUT FORMAT
If no sequence is found, a single line reading `NONE'. Otherwise, output one or more lines, each with two integers: the first element in a found sequence and the difference between consecutive elements in the same sequence. The lines should be ordered with smallest-difference sequences first and smallest starting number within those sequences first.

There will be no more than 10,000 sequences.

SAMPLE OUTPUT (file ariprog.out)
1 4
37 4
2 8
29 8
1 12
5 12
13 12
17 12
5 20
2 24
*/

/*
ID: jasonxi1
TASK: ariprog
LANG: C++
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

#define MAX_M 250

using namespace std;

int N, M, num_bi = 0;
int bisquares[MAX_M*MAX_M];
bool is_bi[MAX_M*MAX_M*2] = { false };

vector<pair<int, int>> sequence_search(int bi_index)
{
	vector<pair<int, int>> currAns;
	for (int i = bi_index + 1; i < num_bi-N+2; i++)
	{
		int currNum = bisquares[bi_index];
		int num_in_seq = 1;
		int diff = bisquares[i] - bisquares[bi_index];
		while (num_in_seq < N)
		{
			if (diff != 0 && currNum + diff < 250*250*2 && is_bi[currNum+diff])
			{
				currNum += diff;
				num_in_seq += 1;
			}
			else
			{
				break;
			}

		}
		if (num_in_seq >= N)
		{
			currAns.push_back(make_pair(diff, bisquares[bi_index]));
		}
	}
	return currAns;
}

int main()
{
	ifstream fin("ariprog.in");
	ofstream fout("ariprog.out");
	fin >> N >> M;
	for (int i = 0; i <= M; i++)
	{
		for (int j = 0; j <= M; j++)
		{
			if (!is_bi[i*i+j*j])
			{
				bisquares[num_bi] = i * i + j * j;
				is_bi[i * i + j * j] = true;
				num_bi++;
			}
		}
	}
	sort(bisquares, bisquares + num_bi);
	/*
	for (int i = 0; i < num_bi; i++)
	{
		cout << bisquares[i] << endl;
	}
	*/
	for (int i = 0; i < 22; i++)
	{
		cout << is_bi[13421+2772*i] << " ";
	}
	cout << endl;
	vector<pair<int, int>> ans;
	for (int i = 0; i < num_bi-N+1; i++)
	{
		vector<pair<int, int>> currSeq = sequence_search(i);
		ans.insert(ans.end(), currSeq.begin(), currSeq.end());
	}
	sort(ans.begin(), ans.end());
	for (int i = 0; i < ans.size(); i++)
	{
		fout << ans[i].second << " " << ans[i].first << endl;
	}
	if (ans.size() == 0)
	{
		fout << "NONE" << endl;
	}
	return 0;
}