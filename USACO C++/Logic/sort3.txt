/*Sorting is one of the most frequently performed computational tasks. Consider the special sorting problem in which the records to be sorted have at most three different key values. This happens for instance when we sort medalists of a competition according to medal value, that is, gold medalists come first, followed by silver, and bronze medalists come last.

In this task the possible key values are the integers 1, 2 and 3. The required sorting order is non-decreasing. However, sorting has to be accomplished by a sequence of exchange operations. An exchange operation, defined by two position numbers p and q, exchanges the elements in positions p and q.

You are given a sequence of key values. Write a program that computes the minimal number of exchange operations that are necessary to make the sequence sorted.

PROGRAM NAME: sort3
INPUT FORMAT
Line 1:	N (1 <= N <= 1000), the number of records to be sorted
Lines 2-N+1:	A single integer from the set {1, 2, 3}
SAMPLE INPUT (file sort3.in)
9
2
2
1
3
3
3
2
3
1
OUTPUT FORMAT
A single line containing the number of exchanges required
SAMPLE OUTPUT (file sort3.out)
4
*/

/*
ID: jasonxi1
TASK: sort3
LANG: C++
*/

#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

#define MAX_N 1000

using namespace std;

bool is_sorted(int nums[], int N)
{
	for (int i = 0; i < N - 1; i++)
	{
		if (nums[i] > nums[i + 1])
		{
			return false;
		}
	}
	return true;
}

pair<int, int> double_swap(int nums[], int sorted[], int N)
{
	for (int i = 0; i < N-1;i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			if (nums[i] == sorted[j] && nums[j] == sorted[i] && nums[i]!=sorted[i] && nums[j]!=sorted[j])
			{
				return make_pair(i, j);
			}
		}
	}
	return make_pair(-1, -1);
}

pair<int, int> single_swap(int nums[], int sorted[], int N)
{
	for (int i = 0; i < N - 1;i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			if (nums[i] == sorted[j] && nums[i] != sorted[i] and nums[j] != sorted[j])
			{
				return make_pair(i, j);
			}
		}
	}
	return make_pair(-1, -1);
}

int main()
{
	ifstream fin("sort3.in");
	ofstream fout("sort3.out");
	int N;
	int nums[MAX_N];
	fin >> N;
	for (int i = 0; i < N; i++)
	{
		fin >> nums[i];
	}
	int sorted_nums[MAX_N];
	copy(begin(nums), end(nums), begin(sorted_nums));
	sort(sorted_nums, sorted_nums + N);
	/*
	for (int i = 0; i < N; i++)
	{
		cout << sorted_nums[i] << " ";
	}
	*/

	cout << endl;
	pair<int, int> to_swap;
	int num_swaps = 0;
	bool swap = true;
	while (swap)
	{
		to_swap = double_swap(nums, sorted_nums, N);
		if (to_swap.first == -1)
		{
			to_swap = single_swap(nums, sorted_nums, N);
		}
		if(to_swap.first == -1)
		{
			swap = false;
		}
		else
		{
			int temp = nums[to_swap.first];
			nums[to_swap.first] = nums[to_swap.second];
			nums[to_swap.second] = temp;
			num_swaps += 1;
		}
	}
	fout << num_swaps <<endl;
	return 0;
}
